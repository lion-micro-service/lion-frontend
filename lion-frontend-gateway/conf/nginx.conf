
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    lua_package_path "/usr/local/nginx/lua-resty-redis-0.28/lib/?.lua;/usr/local/nginx/lua-resty-http-0.15/lib/?.lua;;";
    upstream minio {
        server 172.16.30.100:9000 weight=10;
        server 172.16.30.101:9000 weight=20;
        server 172.16.30.102:9000 weight=30;
        server 172.16.30.103:9000 weight=40;
     }
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location / {
            default_type 'text/html';
            charset utf-8;
            proxy_redirect off;
            content_by_lua_block {
                local remoteAdderss = ngx.var.remote_addr
                local uri = ngx.var.request_uri
                local redis = require "resty.redis"
                local red = redis:new()
                local http = require "resty.http"
                local httpc = http.new()
                red:set_timeouts(1000, 1000, 1000)
                red:connect("127.0.0.1", 6379)
                local res = red:lrange(remoteAdderss,0,-1)
                for k,v in ipairs(res) do
                    local res, err = httpc:request_uri("http://" .. remoteAdderss .. ":" .. v .. uri)
                    if res and res.status == 200 then
                        http:close()
                        red:close()
                        ngx.say(res.body)
                        return
                    end
                end
                http:close()
                red:close()
                return ngx.exec("@frontProxy",{})
            }
        }

        location /register/gateway {
            default_type 'text/html';
            charset utf-8;
            proxy_redirect off;
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        REMOTE-HOST $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            content_by_lua_block {
                local remoteAdderss = ngx.var.remote_addr
                local port = ngx.var.arg_port
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeouts(1000, 1000, 1000)
                red:connect("127.0.0.1", 6379)
                local ok, err = red:set(remoteAdderss .. ':' .. port, port)
                if not ok then
                    ngx.say("gateway register failed！",err)
                    red:close()
                    return
                end
                red:expire(remoteAdderss .. ':' .. port,2)
                local res = red:lrange(remoteAdderss,0,-1)
                local ports = {port}
                for k,v in ipairs(res) do
                    local res, err = red:get(remoteAdderss .. ':' .. v)
                    if res and tonumber(v) ~= tonumber(port)  then
                        table.insert(ports,v)
                    end
                end
                red:del(remoteAdderss)
                for k,v in ipairs(ports) do
                    red:lpush(remoteAdderss,v)
                end
                red:expire(remoteAdderss,5)
                red:close()
                ngx.say("gateway register success！")
            }
        }
        location /api/file {
            proxy_redirect off;
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        REMOTE-HOST $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite /api/file/(.*)$ /$1 break;
            proxy_pass http://minio;
        }
        location /api {
            proxy_redirect off;
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        REMOTE-HOST $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite /api/(.*)$ /$1 break;
            proxy_pass http://localhost:9090;
        }

        location @frontProxy {
            proxy_redirect off;
            internal;
            root    /opt/html/;
            index   index.php index.html index.htm;
            try_files $uri $uri/ /404/index.html /index.html;
            error_page 404 /404/index.html;
            gzip_static on;
        }
    }
}
